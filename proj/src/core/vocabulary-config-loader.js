/**
 * 动态词库配置加载器 v2.0 (优化版)
 * - 使用索引文件避免无效请求
 * - 并行加载提升速度
 * - 只加载元数据，延迟加载单词数据
 */
class VocabularyConfigLoader {
    constructor() {
        this.config = null;
        this.loadError = null;
        this.manifest = null;
    }
    
    /**
     * 加载词库索引文件
     */
    async loadManifest() {
        try {
            const response = await fetch('./words/manifest.json');
            if (response.ok) {
                this.manifest = await response.json();
                console.log('📋 索引文件加载成功，版本:', this.manifest.version);
                return this.manifest;
            }
        } catch (error) {
            console.warn('⚠️ 索引文件不存在，使用探测模式（较慢）');
        }
        return null;
    }
    
    /**
     * 加载配置（运行时动态生成）
     */
    async loadConfig() {
        try {
            const totalStart = performance.now();
            if (typeof debugLog !== 'undefined') {
                debugLog.info('⏱️ [ConfigLoader] 开始加载词库配置...');
            }
            this.showLoadingProgress('正在加载词库配置...');
            
            // 先加载索引文件
            const manifestStart = performance.now();
            await this.loadManifest();
            if (typeof debugLog !== 'undefined') {
                debugLog.info(`⏱️ [ConfigLoader] 索引文件加载耗时: ${(performance.now() - manifestStart).toFixed(2)}ms`);
            }
            
            // 并行扫描所有目录
            const scanStart = performance.now();
            const [dailyPhonics, specialPractice, gradeBased] = await Promise.all([
                this.scanDailyPhonics(),
                this.scanSpecialPractice(),
                this.scanGradeBased()
            ]);
            if (typeof debugLog !== 'undefined') {
                debugLog.info(`⏱️ [ConfigLoader] 并行扫描所有目录耗时: ${(performance.now() - scanStart).toFixed(2)}ms`);
            }
            
            this.hideLoadingProgress();
            
            // 构建配置对象
            this.config = {
                metadata: {
                    version: "2.0",
                    description: "Word Tetris 分布式词库配置 - 运行时动态生成",
                    lastUpdated: new Date().toISOString().split('T')[0],
                    autoGenerated: true,
                    generatedBy: "JavaScript Runtime",
                    optimized: true
                },
                categories: [
                    {
                        id: "daily-phonics",
                        name: "按天学习音标",
                        description: "15天音标学习计划，系统掌握基础音标",
                        icon: "📅",
                        subcategories: dailyPhonics
                    },
                    {
                        id: "special-practice",
                        name: "专项强化练习",
                        description: "针对重点音标进行强化训练",
                        icon: "🎯",
                        subcategories: specialPractice
                    },
                    {
                        id: "grade-based",
                        name: "按年级分类",
                        description: "小学、初中、高中各年级学期词汇",
                        icon: "🎓",
                        subcategories: gradeBased
                    }
                ],
                defaultConfig: {
                    // 使用动态发现的所有 daily-phonics 文件作为默认配置
                    enabledLibraries: dailyPhonics.map(item => item.id),
                    maxWords: 200,
                    difficultyRange: [1, 3],
                    categories: ["daily-phonics"]
                }
            };
            
            const totalTime = performance.now() - totalStart;
            console.log('✅ 配置加载完成:', {
                dailyPhonics: dailyPhonics.length,
                specialPractice: specialPractice.length,
                gradeBased: this.countGradeItems(gradeBased),
                defaultEnabled: this.config.defaultConfig.enabledLibraries.length
            });
            
            console.log('📋 默认启用的课程:', this.config.defaultConfig.enabledLibraries);
            if (typeof debugLog !== 'undefined') {
                debugLog.success(`⏱️ [ConfigLoader] 总加载耗时: ${totalTime.toFixed(2)}ms`);
            }
            
            return this.config;
            
        } catch (error) {
            console.error('❌ 配置加载失败:', error);
            this.hideLoadingProgress();
            this.loadError = error;
            throw error;
        }
    }
    
    /**
     * 扫描 daily-phonics 目录（优化版）
     * 自动探测 day01.json 到 day50.json 的所有文件
     */
    async scanDailyPhonics() {
        const startTime = performance.now();
        const directory = './words/daily-phonics';
        if (typeof debugLog !== 'undefined') {
            debugLog.info('⏱️ [ConfigLoader] 开始扫描 daily-phonics 目录...');
        }
        
        // 使用索引文件或回退到探测模式
        const filesToCheck = this.manifest?.files?.['daily-phonics'] || 
            Array.from({length: 50}, (_, i) => `day${String(i + 1).padStart(2, '0')}`);
        
        console.log(`  📋 将检查 ${filesToCheck.length} 个文件`);
        
        // 并行加载所有文件
        const loadStart = performance.now();
        const loadPromises = filesToCheck.map(filename => 
            this.loadFileMetadata(directory, filename, 'daily')
        );
        
        const results = await Promise.all(loadPromises);
        if (typeof debugLog !== 'undefined') {
            debugLog.info(`⏱️ [ConfigLoader] 并行加载 daily-phonics 文件耗时: ${(performance.now() - loadStart).toFixed(2)}ms`);
        }
        
        // 过滤掉加载失败的文件
        const validResults = results.filter(r => r !== null);
        
        const totalTime = performance.now() - startTime;
        if (typeof debugLog !== 'undefined') {
            debugLog.success(`✅ daily-phonics 加载完成: ${validResults.length}/${filesToCheck.length} 个文件，总耗时: ${totalTime.toFixed(2)}ms`);
        }
        return validResults.sort((a, b) => a.id.localeCompare(b.id));
    }
    
    /**
     * 扫描 special-practice 目录（优化版）
     * 自动探测常见的音标练习文件命名模式
     */
    async scanSpecialPractice() {
        const directory = './words/special-practice';
        console.log('🔍 扫描 special-practice 目录...');
        
        // 使用索引文件或预定义列表
        const filesToCheck = this.manifest?.files?.['special-practice'] || [
            // 元音音标
            'ae-practice', 'e-practice', 'i-practice', 'o-practice', 'or-practice', 'u-practice',
            'a-practice', 'ar-practice', 'er-practice', 'ir-practice', 'ur-practice',
            'oo-practice', 'ou-practice', 'ow-practice', 'oi-practice', 'oy-practice',
            'ai-practice', 'ay-practice', 'ea-practice', 'ee-practice', 'ie-practice',
            'ue-practice', 'ui-practice', 'au-practice', 'aw-practice', 'ew-practice',
            // 辅音音标
            'th-practice', 'sh-practice', 'ch-practice', 'ph-practice', 'wh-practice',
            'ng-practice', 'nk-practice', 'ck-practice', 'gh-practice',
            // 其他可能的命名
            'vowels-practice', 'consonants-practice', 'diphthongs-practice',
            'long-vowels', 'short-vowels', 'silent-e', 'r-controlled'
        ];
        
        console.log(`  📋 将检查 ${filesToCheck.length} 个文件`);
        
        const loadPromises = filesToCheck.map(filename => 
            this.loadFileMetadata(directory, filename, 'special')
        );
        
        const results = await Promise.all(loadPromises);
        const validResults = results.filter(r => r !== null);
        
        console.log(`✅ special-practice 加载完成: ${validResults.length}/${filesToCheck.length} 个文件`);
        return validResults;
    }
    
    /**
     * 扫描 grade-based 目录（优化版）
     * 自动探测所有年级和学期的文件
     */
    async scanGradeBased() {
        console.log('🔍 扫描 grade-based 目录...');
        
        const gradeStructure = {
            primary: {
                id: "primary-school",
                name: "小学词汇",
                description: "小学三至六年级词汇",
                // 动态探测 grade1-grade6 的所有学期
                gradeRange: [1, 2, 3, 4, 5, 6],
                defaultWords: 60
            },
            middle: {
                id: "middle-school",
                name: "初中词汇",
                description: "初中七至九年级词汇",
                // 动态探测 grade7-grade9
                gradeRange: [7, 8, 9],
                defaultWords: 120
            },
            high: {
                id: "high-school",
                name: "高中词汇",
                description: "高中十至十二年级词汇",
                // 动态探测 grade10-grade12
                gradeRange: [10, 11, 12],
                defaultWords: 200
            }
        };
        
        const subcategories = [];
        
        for (const [levelKey, levelInfo] of Object.entries(gradeStructure)) {
            const loadPromises = [];
            
            // 动态探测每个年级的两个学期（支持按学期和按单元两种格式）
            for (const gradeNum of levelInfo.gradeRange) {
                for (const term of [1, 2]) {
                    // 尝试按学期扫描（整个学期一个文件）
                    const gradeId = `grade${gradeNum}-term${term}`;
                    loadPromises.push(
                        this.loadFileMetadata(`./words/grade-based/${levelKey}`, gradeId, 'grade', gradeNum, term, levelInfo.defaultWords)
                    );
                    
                    // 尝试按单元扫描（每个单元一个文件，最多6个单元）
                    for (let unit = 1; unit <= 6; unit++) {
                        const unitId = `grade${gradeNum}-term${term}-unit${unit}`;
                        loadPromises.push(
                            this.loadFileMetadata(`./words/grade-based/${levelKey}`, unitId, 'grade', gradeNum, term, levelInfo.defaultWords, unit)
                        );
                    }
                }
            }
            
            const results = await Promise.all(loadPromises);
            const items = results.filter(r => r !== null);
            
            // 只有在找到至少一个文件时才添加这个分类
            if (items.length > 0) {
                subcategories.push({
                    id: levelInfo.id,
                    name: levelInfo.name,
                    description: levelInfo.description,
                    items: items
                });
                console.log(`  ✓ ${levelInfo.name}: 发现 ${items.length} 个文件`);
            }
        }
        
        console.log(`✅ grade-based 扫描完成，发现 ${subcategories.length} 个分类`);
        return subcategories;
    }
    
    /**
     * 加载单个文件的元数据（只获取 metadata，不加载完整单词数据）
     */
    async loadFileMetadata(directory, filename, type = 'daily', gradeNum = null, term = null, defaultWords = 0, unit = null) {
        const filepath = `${directory}/${filename}.json`;
        
        try {
            // 直接获取数据（不用 HEAD 预检）
            const response = await fetch(filepath);
            if (!response.ok) return null;
            
            const data = await response.json();
            const metadata = data.metadata || {};
            
            // 根据类型构建结果
            if (type === 'daily') {
                const dayNum = parseInt(filename.match(/\d+/)?.[0] || '0');
                return {
                    id: metadata.id || filename,
                    name: metadata.name || `Day ${dayNum}`,
                    filename: `daily-phonics/${filename}.json`,
                    phoneme: metadata.phoneme || '',
                    description: metadata.description || '',
                    wordCount: metadata.wordCount || metadata.totalWords || 0,
                    difficulty: metadata.difficulty || 'beginner',
                    recommended: true
                };
            } else if (type === 'special') {
                return {
                    id: metadata.id || filename,
                    name: metadata.name || filename.replace(/-/g, ' '),
                    filename: `special-practice/${filename}.json`,
                    phoneme: metadata.phoneme || '',
                    description: metadata.description || '',
                    wordCount: metadata.wordCount || metadata.totalWords || 0,
                    difficulty: metadata.difficulty || 'intermediate',
                    recommended: false
                };
            } else if (type === 'grade') {
                const gradeName = this.getGradeName(gradeNum, term, unit);
                return {
                    id: metadata.id || filename,
                    name: metadata.name || gradeName,
                    filename: filepath.replace('./words/', ''),
                    description: metadata.description || `${gradeName}必学词汇`,
                    wordCount: metadata.wordCount || metadata.totalWords || defaultWords,
                    difficulty: metadata.difficulty || 'beginner',
                    recommended: true
                };
            }
            
        } catch (error) {
            // 静默失败，返回 null
            return null;
        }
    }
    
    /**
     * 生成年级名称
     */
    getGradeName(gradeNum, term, unit = null) {
        const gradeNames = {
            1: '一年级', 2: '二年级', 3: '三年级', 4: '四年级', 5: '五年级', 6: '六年级',
            7: '七年级', 8: '八年级', 9: '九年级',
            10: '高一', 11: '高二', 12: '高三'
        };
        const termName = term === 1 ? '上册' : '下册';
        const unitName = unit ? ` Unit ${unit}` : '';
        return `${gradeNames[gradeNum] || `${gradeNum}年级`}${termName}${unitName}`;
    }
    
    /**
     * 统计年级分类的项目数
     */
    countGradeItems(gradeBased) {
        return gradeBased.reduce((sum, category) => sum + category.items.length, 0);
    }
    
    /**
     * 显示加载进度
     */
    showLoadingProgress(message) {
        if (typeof document === 'undefined') return;
        
        const loader = document.createElement('div');
        loader.id = 'vocab-config-loader';
        loader.innerHTML = `
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                        background: rgba(0,0,0,0.85); color: white; padding: 25px 45px;
                        border-radius: 12px; z-index: 9999; text-align: center; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
                <div class="spinner" style="border: 4px solid #f3f3f3; border-top: 4px solid #3498db;
                                           border-radius: 50%; width: 45px; height: 45px;
                                           animation: spin 0.8s linear infinite; margin: 0 auto 18px;"></div>
                <div style="font-size: 16px; font-weight: 500;">${message}</div>
            </div>
            <style>
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            </style>
        `;
        document.body.appendChild(loader);
    }
    
    /**
     * 隐藏加载进度
     */
    hideLoadingProgress() {
        if (typeof document === 'undefined') return;
        
        const loader = document.getElementById('vocab-config-loader');
        if (loader) {
            loader.style.opacity = '0';
            loader.style.transition = 'opacity 0.3s';
            setTimeout(() => loader.remove(), 300);
        }
    }
    
    /**
     * 获取配置
     */
    getConfig() {
        return this.config;
    }
}

// 导出单例
window.VocabularyConfigLoader = VocabularyConfigLoader;
