/**
 * 动态词库配置加载器
 * 运行时自动扫描 words 目录，生成配置
 */
class VocabularyConfigLoader {
    constructor() {
        this.config = null;
        this.loadError = null;
    }
    
    /**
     * 加载配置（运行时动态生成）
     */
    async loadConfig() {
        try {
            console.log('🔄 开始动态加载词库配置...');
            
            // 并行扫描所有目录
            const [dailyPhonics, specialPractice, gradeBased] = await Promise.all([
                this.scanDailyPhonics(),
                this.scanSpecialPractice(),
                this.scanGradeBased()
            ]);
            
            // 构建配置对象
            this.config = {
                metadata: {
                    version: "2.0",
                    description: "Word Tetris 分布式词库配置 - 运行时动态生成",
                    lastUpdated: new Date().toISOString().split('T')[0],
                    autoGenerated: true,
                    generatedBy: "JavaScript Runtime"
                },
                categories: [
                    {
                        id: "daily-phonics",
                        name: "按天学习音标",
                        description: "15天音标学习计划，系统掌握基础音标",
                        icon: "📅",
                        subcategories: dailyPhonics
                    },
                    {
                        id: "special-practice",
                        name: "专项强化练习",
                        description: "针对重点音标进行强化训练",
                        icon: "🎯",
                        subcategories: specialPractice
                    },
                    {
                        id: "grade-based",
                        name: "按年级分类",
                        description: "小学、初中、高中各年级学期词汇",
                        icon: "🎓",
                        subcategories: gradeBased
                    }
                ],
                defaultConfig: {
                    enabledLibraries: dailyPhonics.slice(0, 4).map(item => item.id),
                    maxWords: 200,
                    difficultyRange: [1, 3],
                    categories: ["daily-phonics"]
                }
            };
            
            console.log('✅ 配置加载完成:', {
                dailyPhonics: dailyPhonics.length,
                specialPractice: specialPractice.length,
                gradeBased: this.countGradeItems(gradeBased)
            });
            
            return this.config;
            
        } catch (error) {
            console.error('❌ 配置加载失败:', error);
            this.loadError = error;
            throw error;
        }
    }
    
    /**
     * 扫描 daily-phonics 目录
     */
    async scanDailyPhonics() {
        const directory = './words/daily-phonics';
        const filePattern = /^day\d+\.json$/;
        
        // 尝试加载已知的文件名
        const knownFiles = [
            'day01', 'day02', 'day03', 'day04', 'day05',
            'day06', 'day07', 'day08', 'day09', 'day10',
            'day11', 'day12', 'day13', 'day14', 'day15'
        ];
        
        const results = [];
        
        for (const filename of knownFiles) {
            const filepath = `${directory}/${filename}.json`;
            
            try {
                const response = await fetch(filepath);
                if (!response.ok) continue; // 文件不存在，跳过
                
                const data = await response.json();
                const metadata = data.metadata || {};
                
                results.push({
                    id: metadata.id || filename,
                    name: metadata.name || filename,
                    filename: `daily-phonics/${filename}.json`,
                    phoneme: metadata.phoneme || '',
                    description: metadata.description || '',
                    wordCount: metadata.wordCount || data.words?.length || 0,
                    difficulty: metadata.difficulty || 'beginner',
                    recommended: true
                });
                
                console.log(`  ✓ ${filename}.json`);
            } catch (error) {
                // 文件不存在或解析失败，静默跳过
                console.log(`  ⊘ ${filename}.json (not found)`);
            }
        }
        
        return results.sort((a, b) => a.id.localeCompare(b.id));
    }
    
    /**
     * 扫描 special-practice 目录
     */
    async scanSpecialPractice() {
        const directory = './words/special-practice';
        
        // 已知的专项练习文件
        const knownFiles = [
            'ae-practice',
            'e-practice',
            'or-practice',
            'o-practice'
        ];
        
        const results = [];
        
        for (const filename of knownFiles) {
            const filepath = `${directory}/${filename}.json`;
            
            try {
                const response = await fetch(filepath);
                if (!response.ok) continue;
                
                const data = await response.json();
                const metadata = data.metadata || {};
                
                results.push({
                    id: metadata.id || filename,
                    name: metadata.name || filename,
                    filename: `special-practice/${filename}.json`,
                    phoneme: metadata.phoneme || '',
                    description: metadata.description || '',
                    wordCount: metadata.wordCount || data.words?.length || 0,
                    difficulty: metadata.difficulty || 'intermediate',
                    recommended: false
                });
                
                console.log(`  ✓ ${filename}.json`);
            } catch (error) {
                console.log(`  ⊘ ${filename}.json (not found)`);
            }
        }
        
        return results;
    }
    
    /**
     * 扫描 grade-based 目录
     */
    async scanGradeBased() {
        const gradeStructure = {
            primary: {
                id: "primary-school",
                name: "小学词汇",
                description: "小学三至六年级词汇",
                grades: [
                    {id: "grade3-term1", name: "三年级上学期", words: 50},
                    {id: "grade3-term2", name: "三年级下学期", words: 50},
                    {id: "grade4-term1", name: "四年级上学期", words: 60},
                    {id: "grade4-term2", name: "四年级下学期", words: 60},
                    {id: "grade5-term1", name: "五年级上学期", words: 70},
                    {id: "grade5-term2", name: "五年级下学期", words: 70},
                    {id: "grade6-term1", name: "六年级上学期", words: 80},
                    {id: "grade6-term2", name: "六年级下学期", words: 80}
                ]
            },
            middle: {
                id: "middle-school",
                name: "初中词汇",
                description: "初中七至九年级词汇",
                grades: [
                    {id: "grade7-term1", name: "七年级上学期", words: 100},
                    {id: "grade7-term2", name: "七年级下学期", words: 100},
                    {id: "grade8-term1", name: "八年级上学期", words: 120},
                    {id: "grade8-term2", name: "八年级下学期", words: 120},
                    {id: "grade9-term1", name: "九年级上学期", words: 150},
                    {id: "grade9-term2", name: "九年级下学期", words: 150}
                ]
            },
            high: {
                id: "high-school",
                name: "高中词汇",
                description: "高中十至十二年级词汇",
                grades: [
                    {id: "grade10-term1", name: "高一上学期", words: 200},
                    {id: "grade10-term2", name: "高一下学期", words: 200},
                    {id: "grade11-term1", name: "高二上学期", words: 200},
                    {id: "grade11-term2", name: "高二下学期", words: 200},
                    {id: "grade12-term1", name: "高三上学期", words: 200},
                    {id: "grade12-term2", name: "高三下学期", words: 200}
                ]
            }
        };
        
        const subcategories = [];
        
        for (const [levelKey, levelInfo] of Object.entries(gradeStructure)) {
            const items = [];
            
            for (const grade of levelInfo.grades) {
                const filepath = `./words/grade-based/${levelKey}/${grade.id}.json`;
                
                try {
                    const response = await fetch(filepath);
                    if (response.ok) {
                        const data = await response.json();
                        const metadata = data.metadata || {};
                        
                        items.push({
                            id: metadata.id || grade.id,
                            name: metadata.name || grade.name,
                            filename: `grade-based/${levelKey}/${grade.id}.json`,
                            description: metadata.description || `${grade.name}必学词汇`,
                            wordCount: metadata.wordCount || data.words?.length || grade.words,
                            difficulty: metadata.difficulty || 'beginner',
                            recommended: true
                        });
                        
                        console.log(`  ✓ ${levelKey}/${grade.id}.json`);
                    } else {
                        // 文件不存在，使用占位符
                        items.push({
                            id: grade.id,
                            name: grade.name,
                            filename: `grade-based/${levelKey}/${grade.id}.json`,
                            description: `${grade.name}必学词汇`,
                            wordCount: grade.words,
                            difficulty: 'beginner',
                            recommended: true
                        });
                    }
                } catch (error) {
                    // 使用占位符
                    items.push({
                        id: grade.id,
                        name: grade.name,
                        filename: `grade-based/${levelKey}/${grade.id}.json`,
                        description: `${grade.name}必学词汇`,
                        wordCount: grade.words,
                        difficulty: 'beginner',
                        recommended: true
                    });
                }
            }
            
            subcategories.push({
                id: levelInfo.id,
                name: levelInfo.name,
                description: levelInfo.description,
                items: items
            });
        }
        
        return subcategories;
    }
    
    /**
     * 统计年级分类的项目数
     */
    countGradeItems(gradeBased) {
        return gradeBased.reduce((sum, category) => sum + category.items.length, 0);
    }
    
    /**
     * 获取配置
     */
    getConfig() {
        return this.config;
    }
}

// 导出单例
window.VocabularyConfigLoader = VocabularyConfigLoader;

